@model PMMX.Modelo.Entidades.Operaciones.Evento

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    @Styles.Render("~/Style/Bootstrap")
    @Styles.Render("~/Style/DataRangePicker")
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Evento</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, "Nombre del Evento: " , htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdOrigen, "Ubicacion: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="Area" name="Area" , class = "form-control"></select>
                <select id="WorkCenters" name="WorkCenters" , class = "form-control"></select>
                <select id="Modulos" name="Modulos" , class = "form-control"></select>
                @Html.Hidden("IdOrigen")
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdCategoria, "Categoria: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdCategoria", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdCategoria, "", new { @class = "text-danger" })
            </div>
        </div>
        

        @*<div class="form-group">
            @Html.LabelFor(model => model.IdAsignador, "Autor: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdAsignador", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdAsignador, "", new { @class = "text-danger" })
            </div>
        </div>*@
        
        <div class="form-group">
            @Html.LabelFor(model => model.IdResponsable, "Asignado a: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdResponsable", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdResponsable, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaInicio, "Fecha Inicio: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.FechaInicio, new { id = "FechaInicio", @class = "form-control" } )
                @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaFin, "Fecha Fin: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.FechaFin, new { id = "FechaFin" , @class = "form-control" } )
                @Html.ValidationMessageFor(model => model.FechaFin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nota, "Comentarios: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nota, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nota, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EsRecurrente, "Recurrente: ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.EsRecurrente)
                    @Html.ValidationMessageFor(model => model.EsRecurrente, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.Hidden("Activo")            
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts{
    @Scripts.Render("~/JS/jquery")
    @Scripts.Render("~/JS/Moment")
    @Scripts.Render("~/JS/DataRangePicker")

    <script>
        $(document).ready(function ()
        {
            var today = new Date();
            getAreas();
            $("#Activo").val(true);

            $('#FechaInicio').daterangepicker({
                "singleDatePicker": true,
                "timePicker": true,
                "timePicker24Hour": true,
                "locale": {
                    "format": "YYYY-MM-DD  h:mm A",
                    "separator": " - ",
                    "applyLabel": "Apply",
                    "cancelLabel": "Cancel",
                    "firstDay": 1
                },
                "startDate": today,
                "endDate": today,
                "minDate": "YYYY-MM-DD  h:mm A",
                "maxDate": "YYYY-MM-DD  h:mm A"
            });

            $('#FechaFin').daterangepicker({
                "singleDatePicker": true,
                "timePicker": true,
                "timePicker24Hour": true,
                "locale": {
                    "format": "YYYY-MM-DD  h:mm A",
                    "separator": " - ",
                    "applyLabel": "Apply",
                    "cancelLabel": "Cancel",
                    "firstDay": 1
                },
                "startDate": today,
                "endDate": today,
                "minDate": "YYYY-MM-DD  h:mm A",
                "maxDate": "YYYY-MM-DD  h:mm A"
            });

            function getAreas() {
                $.ajax({
                    dataType: "json",
                    contentType: "application/json",
                    url: "/Evento/GetArea",
                    success: function (data) {
                        items = '<option>Select Area</option>';
                        $.each(data.areas, function (i, k) {
                            items += "<option value='" + k.Id + "'>" + k.NombreCorto + "</option>";
                        });
                        $('#Area').html(items);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('There was an error while fetching Work Centers!');
                    }
                });
            }


            $('#Area').change(function ()
            {
                $.ajax({
                    dataType: "json",
                    contentType: "application/json",
                    url: "/Evento/GetWorkCenterbyArea?IdArea=" + $('#Area').val(),
                    success: function (data) {
                        items = '<option>Select WorkCenter</option>';
                        $.each(data.wlist, function (i, k) {
                            items += "<option value='" + k.Id + "'>" + k.NombreCorto + "</option>";
                        });
                        $('#WorkCenters').html(items);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('There was an error while fetching Work Centers!');
                    }
                });
            });

            $('#WorkCenters').change(function ()
            {
                $.ajax({
                    dataType: "json",
                    contentType: "application/json",
                    url: "/Evento/GetModulobyWorkCenter?IdWorkCenter=" + $('#WorkCenters').val(),
                    success: function (data)
                    {
                        items = '<option>Select Modulo</option>';
                        $.each(data.modulo, function (i, k) {
                            items += "<option value='" + k.Id + "'>" + k.NombreCorto + "</option>";
                        });
                        $('#Modulos').html(items);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('There was an error while fetching Work Centers!');
                    }
                });
            });

            $('#Modulos').change(function ()
            {
                $.ajax({
                    dataType: "json",
                    contentType: "application/json",
                    url: "/Evento/GetIdOrigen?IdWorkCenter=" + $('#WorkCenters').val() + "&IdModulo=" + $('#Modulos').val(),
                    success: function (data) {
                        $('#IdOrigen').val(data.origen.Id);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('There was an error while fetching Work Centers!');
                    }
                });
            });


        });
    </script>
}